// assets/js/resume_interactive.js
document.addEventListener('DOMContentLoaded', () => {
    // jekyllCvData is passed from the script tag in _layouts/resume.html

    const experienceDetails = document.getElementById('experience-details');
    const timelineNavItems = document.querySelectorAll('#timeline-nav .timeline-item');

    function displayExperience(jobId) {
        const job = jekyllCvData.experience.find(j => j.id === jobId);
        if (!job) return;

        experienceDetails.innerHTML = `
            <h3 class="text-2xl font-bold text-gray-800">${job.role}</h3>
            <p class="text-md font-medium text-gray-600 mb-1">${job.company}</p>
            <p class="text-sm text-gray-400 mb-6">${job.period}</p>
            <ul class="space-y-3 text-gray-600 list-disc list-inside">
                ${job.details.map(d => `<li>${d}</li>`).join('')}
            </ul>
        `;
        
        timelineNavItems.forEach(item => {
            if (item.dataset.jobid === jobId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    // Event listeners for timeline items (generated by Liquid)
    timelineNavItems.forEach(item => {
        item.addEventListener('click', () => {
            displayExperience(item.dataset.jobid);
        });
    });

    // Set initial active state for the first timeline item
    // The first job's details are already rendered by Liquid in the layout.
    if (timelineNavItems.length > 0 && jekyllCvData.experience.length > 0) {
        // Ensure the first timeline item in the nav visually matches the pre-rendered details
        const firstJobId = jekyllCvData.experience[0].id;
         timelineNavItems.forEach(item => {
            if (item.dataset.jobid === firstJobId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }
    
    // Skills Chart
    let skillsChart;
    const skillFilterButtons = document.querySelectorAll('#skill-filters .skill-filter-button');

    skillFilterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category;
            updateSkillsChart(category);
            skillFilterButtons.forEach(btn => btn.classList.remove('active-filter', 'bg-gray-200')); // Use actual classes
            button.classList.add('active-filter', 'bg-gray-200'); // Add styles for active button
        });
    });

    function updateSkillsChart(category) {
        const data = jekyllCvData.skills[category];
        if (!data) {
            console.error("No skill data found for category:", category);
            return;
        }

        if (!skillsChart) {
            const ctx = document.getElementById('skillsChart').getContext('2d');
            skillsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(s => s.name),
                    datasets: [{
                        label: 'Proficiency',
                        data: data.map(s => s.value),
                        backgroundColor: '#BF9270',
                        borderColor: '#a97d5a',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Proficiency: ${context.raw}%`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            max: 100,
                            grid: {
                                color: '#EAE8E2'
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        } else {
            skillsChart.data.labels = data.map(s => s.name);
            skillsChart.data.datasets[0].data = data.map(s => s.value);
            skillsChart.update();
        }
    }

    // Initialize first category for skills chart
    if (skillFilterButtons.length > 0) {
        skillFilterButtons[0].click(); // Simulate click on the first filter button
    }

    // Intersection Observer for navigation active state
    const sections = document.querySelectorAll('main section');
    const navLinks = document.querySelectorAll('aside nav .nav-link');
    
    const observerOptions = {
      rootMargin: '-30% 0px -70% 0px', 
      threshold: 0 
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href').substring(1) === entry.target.id) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }, observerOptions);

    sections.forEach(section => {
      if(section) observer.observe(section);
    });

    // Smooth scrolling for internal links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            if(targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        });
    });
});